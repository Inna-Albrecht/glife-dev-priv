# uniutil

if $ARGS[0] = 'eligible_for_university':
	RESULT = func('uniutil', 'student_status') = 0 and diplom = 0 and (age >= 17 or fakepassport = 1)
end

if $ARGS[0] = 'is_enrolled_prepclass':
	RESULT = prepclassstats['enrolled'] = 1
end

if $ARGS[0] = 'prepclass_count':
	RESULT = prepclassstats['count'] += 1
end

if $ARGS[0] = 'prepclass_cost':
	RESULT = 15000
end

if $ARGS[0] = 'prepclass_closing_hour':
	RESULT = 21
end

if $ARGS[0] = 'is_prepclass_month':
	RESULT = month <= func('uniutil', 'entrance_exam_month')
end

if $ARGS[0] = 'prepclass_in_session':
	RESULT = hour < func('uniutil', 'prepclass_closing_hour') and week < 6

if $ARGS[0] = 'update_prepclass_count':
	prepclassstats['count'] += 1
end

if $ARGS[0] = 'enroll_prepclass':
	money -= func('uniutil', 'prepclass_cost')
	prepclassstats['enrolled'] = 1
	prepclassstats['count'] = 0
end

if $ARGS[0] = 'unenroll_prepclass':
	killvar 'prepclassstats'

if $ARGS[0] = 'entrance_exam_month':
	RESULT = 8
end

if $ARGS[0] = 'is_entrance_exam_month':
	RESULT = month = func('uniutil', 'entrance_exam_month')
end

if $ARGS[0] = 'student_status':
	gs 'uniutil', 'transfer_legacy_vars'
	RESULT = student
end

if $ARGS[0] = 'transfer_legacy_vars':
	if semestr = 0:exit

	unisemestrstats['num'] = semestr
	unisemestrstats['scholarship'] = stipuha
	unisemestrstats['lectures_attended'] = lektor
	unisemestrstats['assignment_progress'] = kursovik
	unisemestrstats['assignments_done'] = kursovikD
	unisemestrstats['is_passed'] = examen

	killvar 'semestr'
	killvar 'stipuha'
	killvar 'lektor'
	killvar 'kursovik'
	killvar 'kursovikD'
	killvar 'examen'
end

if $ARGS[0] = 'enroll_university':
	gs 'uniutil', 'unenroll_prepclass'
	student = 1
	kurs = 1
	unisemestrstats['num'] = 1
	gs 'uniutil', 'reset_scholarship'
	gs 'uniutil', 'reset_lectures_attended'
	gs 'uniutil', 'reset_assignments'
	gs 'uniutil', 'reset_semester_result'
end

if $ARGS[0] = 'unenroll_university':
	if student > 0:
		killvar 'student'
		killvar 'kurs'
		killvar 'unisemestrstats'
	end
end

if $ARGS[0] = 'unenroll':
	gs 'uniutil', 'unenroll_prepclass'
	gs 'uniutil', 'unenroll_university'
end

if $ARGS[0] = 'expel':
	gs 'uniutil', 'unenroll'
	student = -1
end

if $ARGS[0] = 'graduate':
	gs 'uniutil', 'unenroll'
	diplom = 1
end

if $ARGS[0] = 'lecture_start_hour':
	RESULT = 8
end

if $ARGS[0] = 'lecture_length':
	RESULT = 6

if $ARGS[0] = 'lectures_attended':
	RESULT = unisemestrstats['lectures_attended']
end

if $ARGS[0] = 'update_lectures_attended':
	lektor += 1
end

if $ARGS[0] = 'reset_lectures_attended':
	unisemestrstats['lectures_attended'] = 0
end

if $ARGS[0] = 'have_great_attendence':
	RESULT = func('uniutil', 'lectures_attended') > 55
end

if $ARGS[0] = 'have_ok_attendence':
	RESULT = func('uniutil', 'lectures_attended') > 40
end

if $ARGS[0] = 'assignment_progress':
	RESULT = unisemestrstats['assignment_progress']
end

if $ARGS[0] = 'update_assignment_progress':
    unisemestrstats['assignment_progress'] += rand(pcs_intel / 20, pcs_intel / 10)
    if func('uniutil', 'assignment_progress') > 100:unisemestrstats['assignment_progress'] = 100
end

if $ARGS[0] = 'reset_assignment_progress':
	unisemestrstats['assignment_progress'] = 0
end

if $ARGS[0] = 'finished_assignment':
	RESULT = func('uniutil', 'assignment_progress') >= 100
end

if $ARGS[0] = 'assignments_done':
	RESULT = unisemestrstats['assignments_done']
end

if $ARGS[0] = 'update_assignments_done':
	gs 'uniutil', 'reset_assignment_progress'
	unisemestrstats['assignments_done'] += 1
end

if $ARGS[0] = 'reset_assignments_done':
	unisemestrstats['assignments_done'] = 0
end

if $ARGS[0] = 'reset_assignments':
	gs 'uniutil', 'reset_assignment_progress'
	gs 'uniutil', 'reset_assignments_done'
end

if $ARGS[0] = 'did_great_num_assignments':
	RESULT = func('uniutil', 'assignments_done') > 10

if $ARGS[0] = 'did_min_num_assignments':
	RESULT = func('uniutil', 'assignments_done') > 0
end

if $ARGS[0] = 'scholarship_active':
	RESULT = unisemestrstats['scholarship'] = 1 and func('uniutil', 'is_semester_month') ! 0
end

if $ARGS[0] = 'scholarship_value':
	RESULT = 1200
end

if $ARGS[0] = 'enable_scholarship'
	unisemestrstats['scholarship'] = 1
end

if $ARGS[0] = 'reset_scholarship':
	unisemestrstats['scholarship'] = 0
end

if $ARGS[0] = 'semester':
	RESULT = unisemestrstats['num']
end

if $ARGS[0] = 'lecture_start_month':
	if ARGS[1] = 1:
		RESULT = 9
	elseif ARGS[1] = 2:
		RESULT = 2
	else:
		!! Set to impossible month if it is not semester 1 or 2
		RESULT = 13
	end
end

if $ARGS[0] = 'lecture_end_month':
	if ARGS[1] = 1:
		RESULT = 11
	elseif ARGS[1] = 2:
		RESULT = 4
	else:
		!! Set to impossible month if it is not semester 1 or 2
		RESULT = 0
	end
end

if $ARGS[0] = 'exam_month':
	if ARGS[1] = 1:
		RESULT = 12
	elseif ARGS[1] = 2:
		RESULT = 5
	else:
		!! Set to impossible month if it is not semester 1 or 2
		RESULT = 0
	end
end

if $ARGS[0] = 'is_lecture_month':
	unilect_sm = func('uniutil', 'lecture_start_month', func('uniutil', 'semester'))
	unilect_em = func('uniutil', 'lecture_end_month', func('uniutil', 'semester'))
	if unilect_sm <= unilect_em:
		!! if semester is in one calendar year
		RESULT = month >= unilect_sm and month <= unilect_em
	else:
		!! if semester continues through New Years
		RESULT = month >= unilect_sm or month <= unilect_em
	end
	killvar 'unilect_sm'
	killvar 'unilect_em'
end

if $ARGS[0] = 'lecture_in_session':
	RESULT = func('uniutil', 'is_lecture_month') ! 0 and week < 6

if $ARGS[0] = 'is_exam_month':
	RESULT = month = func('uniutil', 'exam_month', func('uniutil', 'semester'))
end

if $ARGS[0] = 'exam_in_session':
	RESULT = func('uniutil', 'is_exam_month') ! 0 and week < 6

if $ARGS[0] = 'is_semester_month':
	RESULT = func('uniutil', 'is_lecture_month') ! 0 or func('uniutil', 'is_exam_month') ! 0
end

if $ARGS[0] = 'next_semester':
	if func('uniutil', 'semester') = 1:
		RESULT = 2
	else:
		RESULT = 1
	end
end

if $ARGS[0] = 'update_semester':
	unisemestrstats['num'] = func('uniutil', 'next_semester')
end

if $ARGS[0] = 'semester_result':
	RESULT = unisemestrstats['is_passed']
end

if $ARGS[0] = 'set_semester_passed':
	unisemestrstats['is_passed'] = 1
end

if $ARGS[0] = 'set_semester_failed':
	unisemestrstats['is_passed'] = -1
end

if $ARGS[0] = 'set_semester_skipped':
	unisemestrstats['is_passed'] = -2
end

if $ARGS[0] = 'reset_semester_result':
	unisemestrstats['is_passed'] = 0
end

if $ARGS[0] = 'semester_passed':
	RESULT = func('uniutil', 'semester_result') > 0
end

if $ARGS[0] = 'semester_failed':
	RESULT = func('uniutil', 'semester_result') < 0
end

if $ARGS[0] =  'exam_outcome':
	gs 'uniutil', 'reset_assignments'
	gs 'uniutil', 'reset_lectures_attended'

	if $ARGS[1] = 'passed_honors':
		gs 'uniutil', 'set_semester_passed'
		gs 'uniutil', 'enable_scholarship'
	elseif $ARGS[1] = 'passed'
		gs 'uniutil', 'set_semester_passed'
		gs 'uniutil', 'reset_scholarship'
	else:
		gs 'uniutil', 'set_semester_failed'
		gs 'uniutil', 'reset_scholarship'
	end
end

if $ARGS[0] = 'check_semester_vs_date':
	unilect_sm = func('uniutil', 'lecture_start_month', func('uniutil', 'semester'))
	uniexam_m = func('uniutil', 'exam_month', func('uniutil', 'semester'))

	if unilect_sm <= uniexam_m:
		!! if semester is in one calendar year
		if func('uniutil', 'semester_passed') = 0 and (month < unilect_sm or month > uniexam_m):
			gs 'uniutil', 'set_semester_skipped'
		end
	else:
		!! if semester continues through New Years
		if func('uniutil', 'semester_passed') = 0 and (month < unilect_sm and month > uniexam_m):
			gs 'uniutil', 'set_semester_skipped'
		end
	end

	killvar 'unilect_sm'
	killvar 'uniexam_m'
end

--- uniutil ---------------------------------